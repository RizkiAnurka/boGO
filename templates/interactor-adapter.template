package interactor

import (
	"context"

	"<module_name>/internal/application"
	"<module_name>/internal/application/dto"
)

// <adapter_name> adapter for <service_name> operations
type <adapter_name> struct {
	ctx     context.Context
	<app_service_name> *application.<app_service_type>
}

// New<adapter_name> creates new <adapter_name> adapter
func New<adapter_name>(ctx context.Context, <app_service_name> *application.<app_service_type>) <service_name> {
	return &<adapter_name>{
		ctx:     ctx,
		<app_service_name>: <app_service_name>,
	}
}

// Find retrieves <entity_name> entities with filtering, sorting, and pagination
func (a *<adapter_name>) Find(ctx context.Context, filter map[string]any, sort map[string]any, limit, offset int) (<dto_plural_param> dto.<dto_plural>, total int64, err error) {
	return a.<app_service_name>.Find(ctx, filter, sort, limit, offset)
}

// Create creates a new <entity_name> entity
func (a *<adapter_name>) Create(ctx context.Context, <dto_param> dto.<dto_name>) (int64, error) {
	return a.<app_service_name>.Create(ctx, <dto_param>)
}

// Update updates an existing <entity_name> entity
func (a *<adapter_name>) Update(ctx context.Context, <dto_param> dto.<dto_name>) error {
	return a.<app_service_name>.Update(ctx, <dto_param>)
}

// Delete removes a <entity_name> entity by ID
func (a *<adapter_name>) Delete(ctx context.Context, id int64) error {
	return a.<app_service_name>.Delete(ctx, id)
}

// GetByID retrieves a <entity_name> entity by its ID
func (a *<adapter_name>) GetByID(ctx context.Context, id int64) (dto.<dto_name>, error) {
	return a.<app_service_name>.GetByID(ctx, id)
}